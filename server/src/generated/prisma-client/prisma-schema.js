module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.0-beta). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePost {
  count: Int!
}

type AggregateReply {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createReply(data: ReplyCreateInput!): Reply!
  updateReply(data: ReplyUpdateInput!, where: ReplyWhereUniqueInput!): Reply
  updateManyReplies(data: ReplyUpdateManyMutationInput!, where: ReplyWhereInput): BatchPayload!
  upsertReply(where: ReplyWhereUniqueInput!, create: ReplyCreateInput!, update: ReplyUpdateInput!): Reply!
  deleteReply(where: ReplyWhereUniqueInput!): Reply
  deleteManyReplies(where: ReplyWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  createdAt: DateTime!
  text: String!
  postLikeCount: Int!
  postDislikeCount: Int!
  replies(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reply!]
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  text: String!
  postLikeCount: Int
  postDislikeCount: Int
  replies: ReplyCreateManyWithoutPostInput
}

input PostCreateOneWithoutRepliesInput {
  create: PostCreateWithoutRepliesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutRepliesInput {
  id: ID
  text: String!
  postLikeCount: Int
  postDislikeCount: Int
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  postLikeCount_ASC
  postLikeCount_DESC
  postDislikeCount_ASC
  postDislikeCount_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
  postLikeCount: Int!
  postDislikeCount: Int!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  text: String
  postLikeCount: Int
  postDislikeCount: Int
  replies: ReplyUpdateManyWithoutPostInput
}

input PostUpdateManyMutationInput {
  text: String
  postLikeCount: Int
  postDislikeCount: Int
}

input PostUpdateOneRequiredWithoutRepliesInput {
  create: PostCreateWithoutRepliesInput
  update: PostUpdateWithoutRepliesDataInput
  upsert: PostUpsertWithoutRepliesInput
  connect: PostWhereUniqueInput
}

input PostUpdateWithoutRepliesDataInput {
  text: String
  postLikeCount: Int
  postDislikeCount: Int
}

input PostUpsertWithoutRepliesInput {
  update: PostUpdateWithoutRepliesDataInput!
  create: PostCreateWithoutRepliesInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  postLikeCount: Int
  postLikeCount_not: Int
  postLikeCount_in: [Int!]
  postLikeCount_not_in: [Int!]
  postLikeCount_lt: Int
  postLikeCount_lte: Int
  postLikeCount_gt: Int
  postLikeCount_gte: Int
  postDislikeCount: Int
  postDislikeCount_not: Int
  postDislikeCount_in: [Int!]
  postDislikeCount_not_in: [Int!]
  postDislikeCount_lt: Int
  postDislikeCount_lte: Int
  postDislikeCount_gt: Int
  postDislikeCount_gte: Int
  replies_every: ReplyWhereInput
  replies_some: ReplyWhereInput
  replies_none: ReplyWhereInput
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  reply(where: ReplyWhereUniqueInput!): Reply
  replies(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reply]!
  repliesConnection(where: ReplyWhereInput, orderBy: ReplyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReplyConnection!
  node(id: ID!): Node
}

type Reply {
  id: ID!
  createdAt: DateTime!
  text: String!
  replyLikeCount: Int!
  replyDislikeCount: Int!
  post: Post!
}

type ReplyConnection {
  pageInfo: PageInfo!
  edges: [ReplyEdge]!
  aggregate: AggregateReply!
}

input ReplyCreateInput {
  id: ID
  text: String!
  replyLikeCount: Int
  replyDislikeCount: Int
  post: PostCreateOneWithoutRepliesInput!
}

input ReplyCreateManyWithoutPostInput {
  create: [ReplyCreateWithoutPostInput!]
  connect: [ReplyWhereUniqueInput!]
}

input ReplyCreateWithoutPostInput {
  id: ID
  text: String!
  replyLikeCount: Int
  replyDislikeCount: Int
}

type ReplyEdge {
  node: Reply!
  cursor: String!
}

enum ReplyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  replyLikeCount_ASC
  replyLikeCount_DESC
  replyDislikeCount_ASC
  replyDislikeCount_DESC
}

type ReplyPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
  replyLikeCount: Int!
  replyDislikeCount: Int!
}

input ReplyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  replyLikeCount: Int
  replyLikeCount_not: Int
  replyLikeCount_in: [Int!]
  replyLikeCount_not_in: [Int!]
  replyLikeCount_lt: Int
  replyLikeCount_lte: Int
  replyLikeCount_gt: Int
  replyLikeCount_gte: Int
  replyDislikeCount: Int
  replyDislikeCount_not: Int
  replyDislikeCount_in: [Int!]
  replyDislikeCount_not_in: [Int!]
  replyDislikeCount_lt: Int
  replyDislikeCount_lte: Int
  replyDislikeCount_gt: Int
  replyDislikeCount_gte: Int
  AND: [ReplyScalarWhereInput!]
  OR: [ReplyScalarWhereInput!]
  NOT: [ReplyScalarWhereInput!]
}

type ReplySubscriptionPayload {
  mutation: MutationType!
  node: Reply
  updatedFields: [String!]
  previousValues: ReplyPreviousValues
}

input ReplySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReplyWhereInput
  AND: [ReplySubscriptionWhereInput!]
  OR: [ReplySubscriptionWhereInput!]
  NOT: [ReplySubscriptionWhereInput!]
}

input ReplyUpdateInput {
  text: String
  replyLikeCount: Int
  replyDislikeCount: Int
  post: PostUpdateOneRequiredWithoutRepliesInput
}

input ReplyUpdateManyDataInput {
  text: String
  replyLikeCount: Int
  replyDislikeCount: Int
}

input ReplyUpdateManyMutationInput {
  text: String
  replyLikeCount: Int
  replyDislikeCount: Int
}

input ReplyUpdateManyWithoutPostInput {
  create: [ReplyCreateWithoutPostInput!]
  delete: [ReplyWhereUniqueInput!]
  connect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  disconnect: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutPostInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutPostInput!]
  deleteMany: [ReplyScalarWhereInput!]
  updateMany: [ReplyUpdateManyWithWhereNestedInput!]
}

input ReplyUpdateManyWithWhereNestedInput {
  where: ReplyScalarWhereInput!
  data: ReplyUpdateManyDataInput!
}

input ReplyUpdateWithoutPostDataInput {
  text: String
  replyLikeCount: Int
  replyDislikeCount: Int
}

input ReplyUpdateWithWhereUniqueWithoutPostInput {
  where: ReplyWhereUniqueInput!
  data: ReplyUpdateWithoutPostDataInput!
}

input ReplyUpsertWithWhereUniqueWithoutPostInput {
  where: ReplyWhereUniqueInput!
  update: ReplyUpdateWithoutPostDataInput!
  create: ReplyCreateWithoutPostInput!
}

input ReplyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  replyLikeCount: Int
  replyLikeCount_not: Int
  replyLikeCount_in: [Int!]
  replyLikeCount_not_in: [Int!]
  replyLikeCount_lt: Int
  replyLikeCount_lte: Int
  replyLikeCount_gt: Int
  replyLikeCount_gte: Int
  replyDislikeCount: Int
  replyDislikeCount_not: Int
  replyDislikeCount_in: [Int!]
  replyDislikeCount_not_in: [Int!]
  replyDislikeCount_lt: Int
  replyDislikeCount_lte: Int
  replyDislikeCount_gt: Int
  replyDislikeCount_gte: Int
  post: PostWhereInput
  AND: [ReplyWhereInput!]
  OR: [ReplyWhereInput!]
  NOT: [ReplyWhereInput!]
}

input ReplyWhereUniqueInput {
  id: ID
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  reply(where: ReplySubscriptionWhereInput): ReplySubscriptionPayload
}
`
      }
    