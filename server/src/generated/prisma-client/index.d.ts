// Code generated by Prisma (prisma@1.32.0-beta). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  post: (where?: PostWhereInput) => Promise<boolean>;
  reply: (where?: ReplyWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  reply: (where: ReplyWhereUniqueInput) => ReplyPromise;
  replies: (args?: {
    where?: ReplyWhereInput;
    orderBy?: ReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Reply>;
  repliesConnection: (args?: {
    where?: ReplyWhereInput;
    orderBy?: ReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReplyConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createReply: (data: ReplyCreateInput) => ReplyPromise;
  updateReply: (args: {
    data: ReplyUpdateInput;
    where: ReplyWhereUniqueInput;
  }) => ReplyPromise;
  updateManyReplies: (args: {
    data: ReplyUpdateManyMutationInput;
    where?: ReplyWhereInput;
  }) => BatchPayloadPromise;
  upsertReply: (args: {
    where: ReplyWhereUniqueInput;
    create: ReplyCreateInput;
    update: ReplyUpdateInput;
  }) => ReplyPromise;
  deleteReply: (where: ReplyWhereUniqueInput) => ReplyPromise;
  deleteManyReplies: (where?: ReplyWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  reply: (
    where?: ReplySubscriptionWhereInput
  ) => ReplySubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ReplyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "text_ASC"
  | "text_DESC"
  | "replyLikeCount_ASC"
  | "replyLikeCount_DESC"
  | "replyDislikeCount_ASC"
  | "replyDislikeCount_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "text_ASC"
  | "text_DESC"
  | "postLikeCount_ASC"
  | "postLikeCount_DESC"
  | "postDislikeCount_ASC"
  | "postDislikeCount_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ReplyUpdateManyWithoutPostInput {
  create?: ReplyCreateWithoutPostInput[] | ReplyCreateWithoutPostInput;
  delete?: ReplyWhereUniqueInput[] | ReplyWhereUniqueInput;
  connect?: ReplyWhereUniqueInput[] | ReplyWhereUniqueInput;
  set?: ReplyWhereUniqueInput[] | ReplyWhereUniqueInput;
  disconnect?: ReplyWhereUniqueInput[] | ReplyWhereUniqueInput;
  update?:
    | ReplyUpdateWithWhereUniqueWithoutPostInput[]
    | ReplyUpdateWithWhereUniqueWithoutPostInput;
  upsert?:
    | ReplyUpsertWithWhereUniqueWithoutPostInput[]
    | ReplyUpsertWithWhereUniqueWithoutPostInput;
  deleteMany?: ReplyScalarWhereInput[] | ReplyScalarWhereInput;
  updateMany?:
    | ReplyUpdateManyWithWhereNestedInput[]
    | ReplyUpdateManyWithWhereNestedInput;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ReplyCreateInput {
  id?: ID_Input;
  text: String;
  replyLikeCount?: Int;
  replyDislikeCount?: Int;
  post: PostCreateOneWithoutRepliesInput;
}

export interface ReplyUpdateManyWithWhereNestedInput {
  where: ReplyScalarWhereInput;
  data: ReplyUpdateManyDataInput;
}

export interface PostUpdateManyMutationInput {
  text?: String;
  postLikeCount?: Int;
  postDislikeCount?: Int;
}

export interface ReplyUpdateWithoutPostDataInput {
  text?: String;
  replyLikeCount?: Int;
  replyDislikeCount?: Int;
}

export interface ReplySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ReplyWhereInput;
  AND?: ReplySubscriptionWhereInput[] | ReplySubscriptionWhereInput;
  OR?: ReplySubscriptionWhereInput[] | ReplySubscriptionWhereInput;
  NOT?: ReplySubscriptionWhereInput[] | ReplySubscriptionWhereInput;
}

export interface ReplyUpdateManyMutationInput {
  text?: String;
  replyLikeCount?: Int;
  replyDislikeCount?: Int;
}

export interface PostCreateInput {
  id?: ID_Input;
  text: String;
  postLikeCount?: Int;
  postDislikeCount?: Int;
  replies?: ReplyCreateManyWithoutPostInput;
}

export interface PostUpdateWithoutRepliesDataInput {
  text?: String;
  postLikeCount?: Int;
  postDislikeCount?: Int;
}

export interface ReplyCreateManyWithoutPostInput {
  create?: ReplyCreateWithoutPostInput[] | ReplyCreateWithoutPostInput;
  connect?: ReplyWhereUniqueInput[] | ReplyWhereUniqueInput;
}

export interface ReplyUpdateInput {
  text?: String;
  replyLikeCount?: Int;
  replyDislikeCount?: Int;
  post?: PostUpdateOneRequiredWithoutRepliesInput;
}

export interface ReplyCreateWithoutPostInput {
  id?: ID_Input;
  text: String;
  replyLikeCount?: Int;
  replyDislikeCount?: Int;
}

export type ReplyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PostUpdateInput {
  text?: String;
  postLikeCount?: Int;
  postDislikeCount?: Int;
  replies?: ReplyUpdateManyWithoutPostInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  postLikeCount?: Int;
  postLikeCount_not?: Int;
  postLikeCount_in?: Int[] | Int;
  postLikeCount_not_in?: Int[] | Int;
  postLikeCount_lt?: Int;
  postLikeCount_lte?: Int;
  postLikeCount_gt?: Int;
  postLikeCount_gte?: Int;
  postDislikeCount?: Int;
  postDislikeCount_not?: Int;
  postDislikeCount_in?: Int[] | Int;
  postDislikeCount_not_in?: Int[] | Int;
  postDislikeCount_lt?: Int;
  postDislikeCount_lte?: Int;
  postDislikeCount_gt?: Int;
  postDislikeCount_gte?: Int;
  replies_every?: ReplyWhereInput;
  replies_some?: ReplyWhereInput;
  replies_none?: ReplyWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface ReplyUpdateManyDataInput {
  text?: String;
  replyLikeCount?: Int;
  replyDislikeCount?: Int;
}

export interface PostUpsertWithoutRepliesInput {
  update: PostUpdateWithoutRepliesDataInput;
  create: PostCreateWithoutRepliesInput;
}

export interface ReplyScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  replyLikeCount?: Int;
  replyLikeCount_not?: Int;
  replyLikeCount_in?: Int[] | Int;
  replyLikeCount_not_in?: Int[] | Int;
  replyLikeCount_lt?: Int;
  replyLikeCount_lte?: Int;
  replyLikeCount_gt?: Int;
  replyLikeCount_gte?: Int;
  replyDislikeCount?: Int;
  replyDislikeCount_not?: Int;
  replyDislikeCount_in?: Int[] | Int;
  replyDislikeCount_not_in?: Int[] | Int;
  replyDislikeCount_lt?: Int;
  replyDislikeCount_lte?: Int;
  replyDislikeCount_gt?: Int;
  replyDislikeCount_gte?: Int;
  AND?: ReplyScalarWhereInput[] | ReplyScalarWhereInput;
  OR?: ReplyScalarWhereInput[] | ReplyScalarWhereInput;
  NOT?: ReplyScalarWhereInput[] | ReplyScalarWhereInput;
}

export interface ReplyUpsertWithWhereUniqueWithoutPostInput {
  where: ReplyWhereUniqueInput;
  update: ReplyUpdateWithoutPostDataInput;
  create: ReplyCreateWithoutPostInput;
}

export interface ReplyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
  replyLikeCount?: Int;
  replyLikeCount_not?: Int;
  replyLikeCount_in?: Int[] | Int;
  replyLikeCount_not_in?: Int[] | Int;
  replyLikeCount_lt?: Int;
  replyLikeCount_lte?: Int;
  replyLikeCount_gt?: Int;
  replyLikeCount_gte?: Int;
  replyDislikeCount?: Int;
  replyDislikeCount_not?: Int;
  replyDislikeCount_in?: Int[] | Int;
  replyDislikeCount_not_in?: Int[] | Int;
  replyDislikeCount_lt?: Int;
  replyDislikeCount_lte?: Int;
  replyDislikeCount_gt?: Int;
  replyDislikeCount_gte?: Int;
  post?: PostWhereInput;
  AND?: ReplyWhereInput[] | ReplyWhereInput;
  OR?: ReplyWhereInput[] | ReplyWhereInput;
  NOT?: ReplyWhereInput[] | ReplyWhereInput;
}

export interface ReplyUpdateWithWhereUniqueWithoutPostInput {
  where: ReplyWhereUniqueInput;
  data: ReplyUpdateWithoutPostDataInput;
}

export interface PostUpdateOneRequiredWithoutRepliesInput {
  create?: PostCreateWithoutRepliesInput;
  update?: PostUpdateWithoutRepliesDataInput;
  upsert?: PostUpsertWithoutRepliesInput;
  connect?: PostWhereUniqueInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface PostCreateOneWithoutRepliesInput {
  create?: PostCreateWithoutRepliesInput;
  connect?: PostWhereUniqueInput;
}

export interface PostCreateWithoutRepliesInput {
  id?: ID_Input;
  text: String;
  postLikeCount?: Int;
  postDislikeCount?: Int;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ReplyPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
  replyLikeCount: Int;
  replyDislikeCount: Int;
}

export interface ReplyPreviousValuesPromise
  extends Promise<ReplyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  replyLikeCount: () => Promise<Int>;
  replyDislikeCount: () => Promise<Int>;
}

export interface ReplyPreviousValuesSubscription
  extends Promise<AsyncIterator<ReplyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  replyLikeCount: () => Promise<AsyncIterator<Int>>;
  replyDislikeCount: () => Promise<AsyncIterator<Int>>;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
  postLikeCount: Int;
  postDislikeCount: Int;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  postLikeCount: () => Promise<Int>;
  postDislikeCount: () => Promise<Int>;
  replies: <T = FragmentableArray<Reply>>(args?: {
    where?: ReplyWhereInput;
    orderBy?: ReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  postLikeCount: () => Promise<AsyncIterator<Int>>;
  postDislikeCount: () => Promise<AsyncIterator<Int>>;
  replies: <T = Promise<AsyncIterator<ReplySubscription>>>(args?: {
    where?: ReplyWhereInput;
    orderBy?: ReplyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
  postLikeCount: Int;
  postDislikeCount: Int;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  postLikeCount: () => Promise<Int>;
  postDislikeCount: () => Promise<Int>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  postLikeCount: () => Promise<AsyncIterator<Int>>;
  postDislikeCount: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ReplySubscriptionPayload {
  mutation: MutationType;
  node: Reply;
  updatedFields: String[];
  previousValues: ReplyPreviousValues;
}

export interface ReplySubscriptionPayloadPromise
  extends Promise<ReplySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReplyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReplyPreviousValuesPromise>() => T;
}

export interface ReplySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReplySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReplySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReplyPreviousValuesSubscription>() => T;
}

export interface Reply {
  id: ID_Output;
  createdAt: DateTimeOutput;
  text: String;
  replyLikeCount: Int;
  replyDislikeCount: Int;
}

export interface ReplyPromise extends Promise<Reply>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  text: () => Promise<String>;
  replyLikeCount: () => Promise<Int>;
  replyDislikeCount: () => Promise<Int>;
  post: <T = PostPromise>() => T;
}

export interface ReplySubscription
  extends Promise<AsyncIterator<Reply>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  text: () => Promise<AsyncIterator<String>>;
  replyLikeCount: () => Promise<AsyncIterator<Int>>;
  replyDislikeCount: () => Promise<AsyncIterator<Int>>;
  post: <T = PostSubscription>() => T;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface AggregateReply {
  count: Int;
}

export interface AggregateReplyPromise
  extends Promise<AggregateReply>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReplySubscription
  extends Promise<AsyncIterator<AggregateReply>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReplyEdge {
  node: Reply;
  cursor: String;
}

export interface ReplyEdgePromise extends Promise<ReplyEdge>, Fragmentable {
  node: <T = ReplyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReplyEdgeSubscription
  extends Promise<AsyncIterator<ReplyEdge>>,
    Fragmentable {
  node: <T = ReplySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReplyConnection {
  pageInfo: PageInfo;
  edges: ReplyEdge[];
}

export interface ReplyConnectionPromise
  extends Promise<ReplyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReplyEdge>>() => T;
  aggregate: <T = AggregateReplyPromise>() => T;
}

export interface ReplyConnectionSubscription
  extends Promise<AsyncIterator<ReplyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReplyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReplySubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Reply",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
